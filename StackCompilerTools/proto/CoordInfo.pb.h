// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CoordInfo.proto

#ifndef PROTOBUF_CoordInfo_2eproto__INCLUDED
#define PROTOBUF_CoordInfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006002 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace SK {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_CoordInfo_2eproto();
void protobuf_AssignDesc_CoordInfo_2eproto();
void protobuf_ShutdownFile_CoordInfo_2eproto();

class CoordInfo;
class CoordInfo_Coord;

// ===================================================================

class CoordInfo_Coord : public ::google::protobuf::Message {
 public:
  CoordInfo_Coord();
  virtual ~CoordInfo_Coord();

  CoordInfo_Coord(const CoordInfo_Coord& from);

  inline CoordInfo_Coord& operator=(const CoordInfo_Coord& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CoordInfo_Coord& default_instance();

  void Swap(CoordInfo_Coord* other);

  // implements Message ----------------------------------------------

  CoordInfo_Coord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CoordInfo_Coord& from);
  void MergeFrom(const CoordInfo_Coord& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double Lat = 1;
  inline bool has_lat() const;
  inline void clear_lat();
  static const int kLatFieldNumber = 1;
  inline double lat() const;
  inline void set_lat(double value);

  // required double Lon = 2;
  inline bool has_lon() const;
  inline void clear_lon();
  static const int kLonFieldNumber = 2;
  inline double lon() const;
  inline void set_lon(double value);

  // @@protoc_insertion_point(class_scope:SK.CoordInfo.Coord)
 private:
  inline void set_has_lat();
  inline void clear_has_lat();
  inline void set_has_lon();
  inline void clear_has_lon();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double lat_;
  double lon_;
  friend void  protobuf_AddDesc_CoordInfo_2eproto();
  friend void protobuf_AssignDesc_CoordInfo_2eproto();
  friend void protobuf_ShutdownFile_CoordInfo_2eproto();

  void InitAsDefaultInstance();
  static CoordInfo_Coord* default_instance_;
};
// -------------------------------------------------------------------

class CoordInfo : public ::google::protobuf::Message {
 public:
  CoordInfo();
  virtual ~CoordInfo();

  CoordInfo(const CoordInfo& from);

  inline CoordInfo& operator=(const CoordInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CoordInfo& default_instance();

  void Swap(CoordInfo* other);

  // implements Message ----------------------------------------------

  CoordInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CoordInfo& from);
  void MergeFrom(const CoordInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CoordInfo_Coord Coord;

  // accessors -------------------------------------------------------

  // required int64 iCount = 1;
  inline bool has_icount() const;
  inline void clear_icount();
  static const int kICountFieldNumber = 1;
  inline ::google::protobuf::int64 icount() const;
  inline void set_icount(::google::protobuf::int64 value);

  // repeated .SK.CoordInfo.Coord Coords = 2;
  inline int coords_size() const;
  inline void clear_coords();
  static const int kCoordsFieldNumber = 2;
  inline const ::SK::CoordInfo_Coord& coords(int index) const;
  inline ::SK::CoordInfo_Coord* mutable_coords(int index);
  inline ::SK::CoordInfo_Coord* add_coords();
  inline const ::google::protobuf::RepeatedPtrField< ::SK::CoordInfo_Coord >&
      coords() const;
  inline ::google::protobuf::RepeatedPtrField< ::SK::CoordInfo_Coord >*
      mutable_coords();

  // @@protoc_insertion_point(class_scope:SK.CoordInfo)
 private:
  inline void set_has_icount();
  inline void clear_has_icount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 icount_;
  ::google::protobuf::RepeatedPtrField< ::SK::CoordInfo_Coord > coords_;
  friend void  protobuf_AddDesc_CoordInfo_2eproto();
  friend void protobuf_AssignDesc_CoordInfo_2eproto();
  friend void protobuf_ShutdownFile_CoordInfo_2eproto();

  void InitAsDefaultInstance();
  static CoordInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// CoordInfo_Coord

// required double Lat = 1;
inline bool CoordInfo_Coord::has_lat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CoordInfo_Coord::set_has_lat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CoordInfo_Coord::clear_has_lat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CoordInfo_Coord::clear_lat() {
  lat_ = 0;
  clear_has_lat();
}
inline double CoordInfo_Coord::lat() const {
  // @@protoc_insertion_point(field_get:SK.CoordInfo.Coord.Lat)
  return lat_;
}
inline void CoordInfo_Coord::set_lat(double value) {
  set_has_lat();
  lat_ = value;
  // @@protoc_insertion_point(field_set:SK.CoordInfo.Coord.Lat)
}

// required double Lon = 2;
inline bool CoordInfo_Coord::has_lon() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CoordInfo_Coord::set_has_lon() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CoordInfo_Coord::clear_has_lon() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CoordInfo_Coord::clear_lon() {
  lon_ = 0;
  clear_has_lon();
}
inline double CoordInfo_Coord::lon() const {
  // @@protoc_insertion_point(field_get:SK.CoordInfo.Coord.Lon)
  return lon_;
}
inline void CoordInfo_Coord::set_lon(double value) {
  set_has_lon();
  lon_ = value;
  // @@protoc_insertion_point(field_set:SK.CoordInfo.Coord.Lon)
}

// -------------------------------------------------------------------

// CoordInfo

// required int64 iCount = 1;
inline bool CoordInfo::has_icount() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CoordInfo::set_has_icount() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CoordInfo::clear_has_icount() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CoordInfo::clear_icount() {
  icount_ = GOOGLE_LONGLONG(0);
  clear_has_icount();
}
inline ::google::protobuf::int64 CoordInfo::icount() const {
  // @@protoc_insertion_point(field_get:SK.CoordInfo.iCount)
  return icount_;
}
inline void CoordInfo::set_icount(::google::protobuf::int64 value) {
  set_has_icount();
  icount_ = value;
  // @@protoc_insertion_point(field_set:SK.CoordInfo.iCount)
}

// repeated .SK.CoordInfo.Coord Coords = 2;
inline int CoordInfo::coords_size() const {
  return coords_.size();
}
inline void CoordInfo::clear_coords() {
  coords_.Clear();
}
inline const ::SK::CoordInfo_Coord& CoordInfo::coords(int index) const {
  // @@protoc_insertion_point(field_get:SK.CoordInfo.Coords)
  return coords_.Get(index);
}
inline ::SK::CoordInfo_Coord* CoordInfo::mutable_coords(int index) {
  // @@protoc_insertion_point(field_mutable:SK.CoordInfo.Coords)
  return coords_.Mutable(index);
}
inline ::SK::CoordInfo_Coord* CoordInfo::add_coords() {
  // @@protoc_insertion_point(field_add:SK.CoordInfo.Coords)
  return coords_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SK::CoordInfo_Coord >&
CoordInfo::coords() const {
  // @@protoc_insertion_point(field_list:SK.CoordInfo.Coords)
  return coords_;
}
inline ::google::protobuf::RepeatedPtrField< ::SK::CoordInfo_Coord >*
CoordInfo::mutable_coords() {
  // @@protoc_insertion_point(field_mutable_list:SK.CoordInfo.Coords)
  return &coords_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace SK

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_CoordInfo_2eproto__INCLUDED
