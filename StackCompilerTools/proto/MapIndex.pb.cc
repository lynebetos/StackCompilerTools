// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MapIndex.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MapIndex.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace SK {

namespace {

const ::google::protobuf::Descriptor* Index_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Index_reflection_ = NULL;
const ::google::protobuf::Descriptor* Index_mapIndex_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Index_mapIndex_reflection_ = NULL;
const ::google::protobuf::Descriptor* Index_mapIndex_wayIndex_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Index_mapIndex_wayIndex_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_MapIndex_2eproto() {
  protobuf_AddDesc_MapIndex_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MapIndex.proto");
  GOOGLE_CHECK(file != NULL);
  Index_descriptor_ = file->message_type(0);
  static const int Index_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Index, icount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Index, mapindexs_),
  };
  Index_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Index_descriptor_,
      Index::default_instance_,
      Index_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Index, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Index, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Index));
  Index_mapIndex_descriptor_ = Index_descriptor_->nested_type(0);
  static const int Index_mapIndex_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Index_mapIndex, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Index_mapIndex, dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Index_mapIndex, wayindexs_),
  };
  Index_mapIndex_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Index_mapIndex_descriptor_,
      Index_mapIndex::default_instance_,
      Index_mapIndex_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Index_mapIndex, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Index_mapIndex, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Index_mapIndex));
  Index_mapIndex_wayIndex_descriptor_ = Index_mapIndex_descriptor_->nested_type(0);
  static const int Index_mapIndex_wayIndex_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Index_mapIndex_wayIndex, stakenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Index_mapIndex_wayIndex, cindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Index_mapIndex_wayIndex, lindex_),
  };
  Index_mapIndex_wayIndex_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Index_mapIndex_wayIndex_descriptor_,
      Index_mapIndex_wayIndex::default_instance_,
      Index_mapIndex_wayIndex_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Index_mapIndex_wayIndex, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Index_mapIndex_wayIndex, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Index_mapIndex_wayIndex));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MapIndex_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Index_descriptor_, &Index::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Index_mapIndex_descriptor_, &Index_mapIndex::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Index_mapIndex_wayIndex_descriptor_, &Index_mapIndex_wayIndex::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MapIndex_2eproto() {
  delete Index::default_instance_;
  delete Index_reflection_;
  delete Index_mapIndex::default_instance_;
  delete Index_mapIndex_reflection_;
  delete Index_mapIndex_wayIndex::default_instance_;
  delete Index_mapIndex_wayIndex_reflection_;
}

void protobuf_AddDesc_MapIndex_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016MapIndex.proto\022\002SK\"\324\001\n\005Index\022\016\n\006iCount"
    "\030\001 \002(\005\022%\n\tmapIndexs\030\002 \003(\0132\022.SK.Index.map"
    "Index\032\223\001\n\010mapIndex\022\014\n\004code\030\001 \002(\t\022\013\n\003dir\030"
    "\002 \002(\005\022.\n\twayIndexs\030\003 \003(\0132\033.SK.Index.mapI"
    "ndex.wayIndex\032<\n\010wayIndex\022\020\n\010stakeNum\030\001 "
    "\002(\005\022\016\n\006CIndex\030\002 \002(\005\022\016\n\006LIndex\030\003 \002(\005", 235);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MapIndex.proto", &protobuf_RegisterTypes);
  Index::default_instance_ = new Index();
  Index_mapIndex::default_instance_ = new Index_mapIndex();
  Index_mapIndex_wayIndex::default_instance_ = new Index_mapIndex_wayIndex();
  Index::default_instance_->InitAsDefaultInstance();
  Index_mapIndex::default_instance_->InitAsDefaultInstance();
  Index_mapIndex_wayIndex::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MapIndex_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MapIndex_2eproto {
  StaticDescriptorInitializer_MapIndex_2eproto() {
    protobuf_AddDesc_MapIndex_2eproto();
  }
} static_descriptor_initializer_MapIndex_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Index_mapIndex_wayIndex::kStakeNumFieldNumber;
const int Index_mapIndex_wayIndex::kCIndexFieldNumber;
const int Index_mapIndex_wayIndex::kLIndexFieldNumber;
#endif  // !_MSC_VER

Index_mapIndex_wayIndex::Index_mapIndex_wayIndex()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SK.Index.mapIndex.wayIndex)
}

void Index_mapIndex_wayIndex::InitAsDefaultInstance() {
}

Index_mapIndex_wayIndex::Index_mapIndex_wayIndex(const Index_mapIndex_wayIndex& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SK.Index.mapIndex.wayIndex)
}

void Index_mapIndex_wayIndex::SharedCtor() {
  _cached_size_ = 0;
  stakenum_ = 0;
  cindex_ = 0;
  lindex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Index_mapIndex_wayIndex::~Index_mapIndex_wayIndex() {
  // @@protoc_insertion_point(destructor:SK.Index.mapIndex.wayIndex)
  SharedDtor();
}

void Index_mapIndex_wayIndex::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Index_mapIndex_wayIndex::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Index_mapIndex_wayIndex::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Index_mapIndex_wayIndex_descriptor_;
}

const Index_mapIndex_wayIndex& Index_mapIndex_wayIndex::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MapIndex_2eproto();
  return *default_instance_;
}

Index_mapIndex_wayIndex* Index_mapIndex_wayIndex::default_instance_ = NULL;

Index_mapIndex_wayIndex* Index_mapIndex_wayIndex::New() const {
  return new Index_mapIndex_wayIndex;
}

void Index_mapIndex_wayIndex::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Index_mapIndex_wayIndex*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(stakenum_, lindex_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Index_mapIndex_wayIndex::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SK.Index.mapIndex.wayIndex)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 stakeNum = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stakenum_)));
          set_has_stakenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_CIndex;
        break;
      }

      // required int32 CIndex = 2;
      case 2: {
        if (tag == 16) {
         parse_CIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cindex_)));
          set_has_cindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_LIndex;
        break;
      }

      // required int32 LIndex = 3;
      case 3: {
        if (tag == 24) {
         parse_LIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lindex_)));
          set_has_lindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SK.Index.mapIndex.wayIndex)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SK.Index.mapIndex.wayIndex)
  return false;
#undef DO_
}

void Index_mapIndex_wayIndex::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SK.Index.mapIndex.wayIndex)
  // required int32 stakeNum = 1;
  if (has_stakenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->stakenum(), output);
  }

  // required int32 CIndex = 2;
  if (has_cindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cindex(), output);
  }

  // required int32 LIndex = 3;
  if (has_lindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->lindex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SK.Index.mapIndex.wayIndex)
}

::google::protobuf::uint8* Index_mapIndex_wayIndex::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SK.Index.mapIndex.wayIndex)
  // required int32 stakeNum = 1;
  if (has_stakenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->stakenum(), target);
  }

  // required int32 CIndex = 2;
  if (has_cindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cindex(), target);
  }

  // required int32 LIndex = 3;
  if (has_lindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->lindex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SK.Index.mapIndex.wayIndex)
  return target;
}

int Index_mapIndex_wayIndex::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 stakeNum = 1;
    if (has_stakenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stakenum());
    }

    // required int32 CIndex = 2;
    if (has_cindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cindex());
    }

    // required int32 LIndex = 3;
    if (has_lindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lindex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Index_mapIndex_wayIndex::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Index_mapIndex_wayIndex* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Index_mapIndex_wayIndex*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Index_mapIndex_wayIndex::MergeFrom(const Index_mapIndex_wayIndex& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stakenum()) {
      set_stakenum(from.stakenum());
    }
    if (from.has_cindex()) {
      set_cindex(from.cindex());
    }
    if (from.has_lindex()) {
      set_lindex(from.lindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Index_mapIndex_wayIndex::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Index_mapIndex_wayIndex::CopyFrom(const Index_mapIndex_wayIndex& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Index_mapIndex_wayIndex::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Index_mapIndex_wayIndex::Swap(Index_mapIndex_wayIndex* other) {
  if (other != this) {
    std::swap(stakenum_, other->stakenum_);
    std::swap(cindex_, other->cindex_);
    std::swap(lindex_, other->lindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Index_mapIndex_wayIndex::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Index_mapIndex_wayIndex_descriptor_;
  metadata.reflection = Index_mapIndex_wayIndex_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Index_mapIndex::kCodeFieldNumber;
const int Index_mapIndex::kDirFieldNumber;
const int Index_mapIndex::kWayIndexsFieldNumber;
#endif  // !_MSC_VER

Index_mapIndex::Index_mapIndex()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SK.Index.mapIndex)
}

void Index_mapIndex::InitAsDefaultInstance() {
}

Index_mapIndex::Index_mapIndex(const Index_mapIndex& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SK.Index.mapIndex)
}

void Index_mapIndex::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dir_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Index_mapIndex::~Index_mapIndex() {
  // @@protoc_insertion_point(destructor:SK.Index.mapIndex)
  SharedDtor();
}

void Index_mapIndex::SharedDtor() {
  if (code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete code_;
  }
  if (this != default_instance_) {
  }
}

void Index_mapIndex::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Index_mapIndex::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Index_mapIndex_descriptor_;
}

const Index_mapIndex& Index_mapIndex::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MapIndex_2eproto();
  return *default_instance_;
}

Index_mapIndex* Index_mapIndex::default_instance_ = NULL;

Index_mapIndex* Index_mapIndex::New() const {
  return new Index_mapIndex;
}

void Index_mapIndex::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_code()) {
      if (code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        code_->clear();
      }
    }
    dir_ = 0;
  }
  wayindexs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Index_mapIndex::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SK.Index.mapIndex)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string code = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->code().data(), this->code().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "code");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_dir;
        break;
      }

      // required int32 dir = 2;
      case 2: {
        if (tag == 16) {
         parse_dir:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dir_)));
          set_has_dir();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_wayIndexs;
        break;
      }

      // repeated .SK.Index.mapIndex.wayIndex wayIndexs = 3;
      case 3: {
        if (tag == 26) {
         parse_wayIndexs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_wayindexs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_wayIndexs;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SK.Index.mapIndex)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SK.Index.mapIndex)
  return false;
#undef DO_
}

void Index_mapIndex::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SK.Index.mapIndex)
  // required string code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->code(), output);
  }

  // required int32 dir = 2;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->dir(), output);
  }

  // repeated .SK.Index.mapIndex.wayIndex wayIndexs = 3;
  for (int i = 0; i < this->wayindexs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->wayindexs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SK.Index.mapIndex)
}

::google::protobuf::uint8* Index_mapIndex::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SK.Index.mapIndex)
  // required string code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->code(), target);
  }

  // required int32 dir = 2;
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->dir(), target);
  }

  // repeated .SK.Index.mapIndex.wayIndex wayIndexs = 3;
  for (int i = 0; i < this->wayindexs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->wayindexs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SK.Index.mapIndex)
  return target;
}

int Index_mapIndex::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->code());
    }

    // required int32 dir = 2;
    if (has_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dir());
    }

  }
  // repeated .SK.Index.mapIndex.wayIndex wayIndexs = 3;
  total_size += 1 * this->wayindexs_size();
  for (int i = 0; i < this->wayindexs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->wayindexs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Index_mapIndex::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Index_mapIndex* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Index_mapIndex*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Index_mapIndex::MergeFrom(const Index_mapIndex& from) {
  GOOGLE_CHECK_NE(&from, this);
  wayindexs_.MergeFrom(from.wayindexs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_dir()) {
      set_dir(from.dir());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Index_mapIndex::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Index_mapIndex::CopyFrom(const Index_mapIndex& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Index_mapIndex::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->wayindexs())) return false;
  return true;
}

void Index_mapIndex::Swap(Index_mapIndex* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(dir_, other->dir_);
    wayindexs_.Swap(&other->wayindexs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Index_mapIndex::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Index_mapIndex_descriptor_;
  metadata.reflection = Index_mapIndex_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Index::kICountFieldNumber;
const int Index::kMapIndexsFieldNumber;
#endif  // !_MSC_VER

Index::Index()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SK.Index)
}

void Index::InitAsDefaultInstance() {
}

Index::Index(const Index& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SK.Index)
}

void Index::SharedCtor() {
  _cached_size_ = 0;
  icount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Index::~Index() {
  // @@protoc_insertion_point(destructor:SK.Index)
  SharedDtor();
}

void Index::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Index::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Index::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Index_descriptor_;
}

const Index& Index::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MapIndex_2eproto();
  return *default_instance_;
}

Index* Index::default_instance_ = NULL;

Index* Index::New() const {
  return new Index;
}

void Index::Clear() {
  icount_ = 0;
  mapindexs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Index::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SK.Index)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 iCount = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &icount_)));
          set_has_icount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_mapIndexs;
        break;
      }

      // repeated .SK.Index.mapIndex mapIndexs = 2;
      case 2: {
        if (tag == 18) {
         parse_mapIndexs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mapindexs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_mapIndexs;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SK.Index)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SK.Index)
  return false;
#undef DO_
}

void Index::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SK.Index)
  // required int32 iCount = 1;
  if (has_icount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->icount(), output);
  }

  // repeated .SK.Index.mapIndex mapIndexs = 2;
  for (int i = 0; i < this->mapindexs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->mapindexs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SK.Index)
}

::google::protobuf::uint8* Index::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SK.Index)
  // required int32 iCount = 1;
  if (has_icount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->icount(), target);
  }

  // repeated .SK.Index.mapIndex mapIndexs = 2;
  for (int i = 0; i < this->mapindexs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->mapindexs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SK.Index)
  return target;
}

int Index::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 iCount = 1;
    if (has_icount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->icount());
    }

  }
  // repeated .SK.Index.mapIndex mapIndexs = 2;
  total_size += 1 * this->mapindexs_size();
  for (int i = 0; i < this->mapindexs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mapindexs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Index::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Index* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Index*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Index::MergeFrom(const Index& from) {
  GOOGLE_CHECK_NE(&from, this);
  mapindexs_.MergeFrom(from.mapindexs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_icount()) {
      set_icount(from.icount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Index::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Index::CopyFrom(const Index& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Index::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->mapindexs())) return false;
  return true;
}

void Index::Swap(Index* other) {
  if (other != this) {
    std::swap(icount_, other->icount_);
    mapindexs_.Swap(&other->mapindexs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Index::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Index_descriptor_;
  metadata.reflection = Index_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace SK

// @@protoc_insertion_point(global_scope)
