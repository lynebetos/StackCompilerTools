// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MapIndex.proto

#ifndef PROTOBUF_MapIndex_2eproto__INCLUDED
#define PROTOBUF_MapIndex_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006002 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace SK {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_MapIndex_2eproto();
void protobuf_AssignDesc_MapIndex_2eproto();
void protobuf_ShutdownFile_MapIndex_2eproto();

class Index;
class Index_mapIndex;
class Index_mapIndex_wayIndex;

// ===================================================================

class Index_mapIndex_wayIndex : public ::google::protobuf::Message {
 public:
  Index_mapIndex_wayIndex();
  virtual ~Index_mapIndex_wayIndex();

  Index_mapIndex_wayIndex(const Index_mapIndex_wayIndex& from);

  inline Index_mapIndex_wayIndex& operator=(const Index_mapIndex_wayIndex& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Index_mapIndex_wayIndex& default_instance();

  void Swap(Index_mapIndex_wayIndex* other);

  // implements Message ----------------------------------------------

  Index_mapIndex_wayIndex* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Index_mapIndex_wayIndex& from);
  void MergeFrom(const Index_mapIndex_wayIndex& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 stakeNum = 1;
  inline bool has_stakenum() const;
  inline void clear_stakenum();
  static const int kStakeNumFieldNumber = 1;
  inline ::google::protobuf::int32 stakenum() const;
  inline void set_stakenum(::google::protobuf::int32 value);

  // required int32 CIndex = 2;
  inline bool has_cindex() const;
  inline void clear_cindex();
  static const int kCIndexFieldNumber = 2;
  inline ::google::protobuf::int32 cindex() const;
  inline void set_cindex(::google::protobuf::int32 value);

  // required int32 LIndex = 3;
  inline bool has_lindex() const;
  inline void clear_lindex();
  static const int kLIndexFieldNumber = 3;
  inline ::google::protobuf::int32 lindex() const;
  inline void set_lindex(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SK.Index.mapIndex.wayIndex)
 private:
  inline void set_has_stakenum();
  inline void clear_has_stakenum();
  inline void set_has_cindex();
  inline void clear_has_cindex();
  inline void set_has_lindex();
  inline void clear_has_lindex();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 stakenum_;
  ::google::protobuf::int32 cindex_;
  ::google::protobuf::int32 lindex_;
  friend void  protobuf_AddDesc_MapIndex_2eproto();
  friend void protobuf_AssignDesc_MapIndex_2eproto();
  friend void protobuf_ShutdownFile_MapIndex_2eproto();

  void InitAsDefaultInstance();
  static Index_mapIndex_wayIndex* default_instance_;
};
// -------------------------------------------------------------------

class Index_mapIndex : public ::google::protobuf::Message {
 public:
  Index_mapIndex();
  virtual ~Index_mapIndex();

  Index_mapIndex(const Index_mapIndex& from);

  inline Index_mapIndex& operator=(const Index_mapIndex& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Index_mapIndex& default_instance();

  void Swap(Index_mapIndex* other);

  // implements Message ----------------------------------------------

  Index_mapIndex* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Index_mapIndex& from);
  void MergeFrom(const Index_mapIndex& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Index_mapIndex_wayIndex wayIndex;

  // accessors -------------------------------------------------------

  // required string code = 1;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 1;
  inline const ::std::string& code() const;
  inline void set_code(const ::std::string& value);
  inline void set_code(const char* value);
  inline void set_code(const char* value, size_t size);
  inline ::std::string* mutable_code();
  inline ::std::string* release_code();
  inline void set_allocated_code(::std::string* code);

  // required int32 dir = 2;
  inline bool has_dir() const;
  inline void clear_dir();
  static const int kDirFieldNumber = 2;
  inline ::google::protobuf::int32 dir() const;
  inline void set_dir(::google::protobuf::int32 value);

  // repeated .SK.Index.mapIndex.wayIndex wayIndexs = 3;
  inline int wayindexs_size() const;
  inline void clear_wayindexs();
  static const int kWayIndexsFieldNumber = 3;
  inline const ::SK::Index_mapIndex_wayIndex& wayindexs(int index) const;
  inline ::SK::Index_mapIndex_wayIndex* mutable_wayindexs(int index);
  inline ::SK::Index_mapIndex_wayIndex* add_wayindexs();
  inline const ::google::protobuf::RepeatedPtrField< ::SK::Index_mapIndex_wayIndex >&
      wayindexs() const;
  inline ::google::protobuf::RepeatedPtrField< ::SK::Index_mapIndex_wayIndex >*
      mutable_wayindexs();

  // @@protoc_insertion_point(class_scope:SK.Index.mapIndex)
 private:
  inline void set_has_code();
  inline void clear_has_code();
  inline void set_has_dir();
  inline void clear_has_dir();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* code_;
  ::google::protobuf::RepeatedPtrField< ::SK::Index_mapIndex_wayIndex > wayindexs_;
  ::google::protobuf::int32 dir_;
  friend void  protobuf_AddDesc_MapIndex_2eproto();
  friend void protobuf_AssignDesc_MapIndex_2eproto();
  friend void protobuf_ShutdownFile_MapIndex_2eproto();

  void InitAsDefaultInstance();
  static Index_mapIndex* default_instance_;
};
// -------------------------------------------------------------------

class Index : public ::google::protobuf::Message {
 public:
  Index();
  virtual ~Index();

  Index(const Index& from);

  inline Index& operator=(const Index& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Index& default_instance();

  void Swap(Index* other);

  // implements Message ----------------------------------------------

  Index* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Index& from);
  void MergeFrom(const Index& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Index_mapIndex mapIndex;

  // accessors -------------------------------------------------------

  // required int32 iCount = 1;
  inline bool has_icount() const;
  inline void clear_icount();
  static const int kICountFieldNumber = 1;
  inline ::google::protobuf::int32 icount() const;
  inline void set_icount(::google::protobuf::int32 value);

  // repeated .SK.Index.mapIndex mapIndexs = 2;
  inline int mapindexs_size() const;
  inline void clear_mapindexs();
  static const int kMapIndexsFieldNumber = 2;
  inline const ::SK::Index_mapIndex& mapindexs(int index) const;
  inline ::SK::Index_mapIndex* mutable_mapindexs(int index);
  inline ::SK::Index_mapIndex* add_mapindexs();
  inline const ::google::protobuf::RepeatedPtrField< ::SK::Index_mapIndex >&
      mapindexs() const;
  inline ::google::protobuf::RepeatedPtrField< ::SK::Index_mapIndex >*
      mutable_mapindexs();

  // @@protoc_insertion_point(class_scope:SK.Index)
 private:
  inline void set_has_icount();
  inline void clear_has_icount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::SK::Index_mapIndex > mapindexs_;
  ::google::protobuf::int32 icount_;
  friend void  protobuf_AddDesc_MapIndex_2eproto();
  friend void protobuf_AssignDesc_MapIndex_2eproto();
  friend void protobuf_ShutdownFile_MapIndex_2eproto();

  void InitAsDefaultInstance();
  static Index* default_instance_;
};
// ===================================================================


// ===================================================================

// Index_mapIndex_wayIndex

// required int32 stakeNum = 1;
inline bool Index_mapIndex_wayIndex::has_stakenum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Index_mapIndex_wayIndex::set_has_stakenum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Index_mapIndex_wayIndex::clear_has_stakenum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Index_mapIndex_wayIndex::clear_stakenum() {
  stakenum_ = 0;
  clear_has_stakenum();
}
inline ::google::protobuf::int32 Index_mapIndex_wayIndex::stakenum() const {
  // @@protoc_insertion_point(field_get:SK.Index.mapIndex.wayIndex.stakeNum)
  return stakenum_;
}
inline void Index_mapIndex_wayIndex::set_stakenum(::google::protobuf::int32 value) {
  set_has_stakenum();
  stakenum_ = value;
  // @@protoc_insertion_point(field_set:SK.Index.mapIndex.wayIndex.stakeNum)
}

// required int32 CIndex = 2;
inline bool Index_mapIndex_wayIndex::has_cindex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Index_mapIndex_wayIndex::set_has_cindex() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Index_mapIndex_wayIndex::clear_has_cindex() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Index_mapIndex_wayIndex::clear_cindex() {
  cindex_ = 0;
  clear_has_cindex();
}
inline ::google::protobuf::int32 Index_mapIndex_wayIndex::cindex() const {
  // @@protoc_insertion_point(field_get:SK.Index.mapIndex.wayIndex.CIndex)
  return cindex_;
}
inline void Index_mapIndex_wayIndex::set_cindex(::google::protobuf::int32 value) {
  set_has_cindex();
  cindex_ = value;
  // @@protoc_insertion_point(field_set:SK.Index.mapIndex.wayIndex.CIndex)
}

// required int32 LIndex = 3;
inline bool Index_mapIndex_wayIndex::has_lindex() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Index_mapIndex_wayIndex::set_has_lindex() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Index_mapIndex_wayIndex::clear_has_lindex() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Index_mapIndex_wayIndex::clear_lindex() {
  lindex_ = 0;
  clear_has_lindex();
}
inline ::google::protobuf::int32 Index_mapIndex_wayIndex::lindex() const {
  // @@protoc_insertion_point(field_get:SK.Index.mapIndex.wayIndex.LIndex)
  return lindex_;
}
inline void Index_mapIndex_wayIndex::set_lindex(::google::protobuf::int32 value) {
  set_has_lindex();
  lindex_ = value;
  // @@protoc_insertion_point(field_set:SK.Index.mapIndex.wayIndex.LIndex)
}

// -------------------------------------------------------------------

// Index_mapIndex

// required string code = 1;
inline bool Index_mapIndex::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Index_mapIndex::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Index_mapIndex::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Index_mapIndex::clear_code() {
  if (code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    code_->clear();
  }
  clear_has_code();
}
inline const ::std::string& Index_mapIndex::code() const {
  // @@protoc_insertion_point(field_get:SK.Index.mapIndex.code)
  return *code_;
}
inline void Index_mapIndex::set_code(const ::std::string& value) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    code_ = new ::std::string;
  }
  code_->assign(value);
  // @@protoc_insertion_point(field_set:SK.Index.mapIndex.code)
}
inline void Index_mapIndex::set_code(const char* value) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    code_ = new ::std::string;
  }
  code_->assign(value);
  // @@protoc_insertion_point(field_set_char:SK.Index.mapIndex.code)
}
inline void Index_mapIndex::set_code(const char* value, size_t size) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    code_ = new ::std::string;
  }
  code_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SK.Index.mapIndex.code)
}
inline ::std::string* Index_mapIndex::mutable_code() {
  set_has_code();
  if (code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    code_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SK.Index.mapIndex.code)
  return code_;
}
inline ::std::string* Index_mapIndex::release_code() {
  clear_has_code();
  if (code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = code_;
    code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Index_mapIndex::set_allocated_code(::std::string* code) {
  if (code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete code_;
  }
  if (code) {
    set_has_code();
    code_ = code;
  } else {
    clear_has_code();
    code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SK.Index.mapIndex.code)
}

// required int32 dir = 2;
inline bool Index_mapIndex::has_dir() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Index_mapIndex::set_has_dir() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Index_mapIndex::clear_has_dir() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Index_mapIndex::clear_dir() {
  dir_ = 0;
  clear_has_dir();
}
inline ::google::protobuf::int32 Index_mapIndex::dir() const {
  // @@protoc_insertion_point(field_get:SK.Index.mapIndex.dir)
  return dir_;
}
inline void Index_mapIndex::set_dir(::google::protobuf::int32 value) {
  set_has_dir();
  dir_ = value;
  // @@protoc_insertion_point(field_set:SK.Index.mapIndex.dir)
}

// repeated .SK.Index.mapIndex.wayIndex wayIndexs = 3;
inline int Index_mapIndex::wayindexs_size() const {
  return wayindexs_.size();
}
inline void Index_mapIndex::clear_wayindexs() {
  wayindexs_.Clear();
}
inline const ::SK::Index_mapIndex_wayIndex& Index_mapIndex::wayindexs(int index) const {
  // @@protoc_insertion_point(field_get:SK.Index.mapIndex.wayIndexs)
  return wayindexs_.Get(index);
}
inline ::SK::Index_mapIndex_wayIndex* Index_mapIndex::mutable_wayindexs(int index) {
  // @@protoc_insertion_point(field_mutable:SK.Index.mapIndex.wayIndexs)
  return wayindexs_.Mutable(index);
}
inline ::SK::Index_mapIndex_wayIndex* Index_mapIndex::add_wayindexs() {
  // @@protoc_insertion_point(field_add:SK.Index.mapIndex.wayIndexs)
  return wayindexs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SK::Index_mapIndex_wayIndex >&
Index_mapIndex::wayindexs() const {
  // @@protoc_insertion_point(field_list:SK.Index.mapIndex.wayIndexs)
  return wayindexs_;
}
inline ::google::protobuf::RepeatedPtrField< ::SK::Index_mapIndex_wayIndex >*
Index_mapIndex::mutable_wayindexs() {
  // @@protoc_insertion_point(field_mutable_list:SK.Index.mapIndex.wayIndexs)
  return &wayindexs_;
}

// -------------------------------------------------------------------

// Index

// required int32 iCount = 1;
inline bool Index::has_icount() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Index::set_has_icount() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Index::clear_has_icount() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Index::clear_icount() {
  icount_ = 0;
  clear_has_icount();
}
inline ::google::protobuf::int32 Index::icount() const {
  // @@protoc_insertion_point(field_get:SK.Index.iCount)
  return icount_;
}
inline void Index::set_icount(::google::protobuf::int32 value) {
  set_has_icount();
  icount_ = value;
  // @@protoc_insertion_point(field_set:SK.Index.iCount)
}

// repeated .SK.Index.mapIndex mapIndexs = 2;
inline int Index::mapindexs_size() const {
  return mapindexs_.size();
}
inline void Index::clear_mapindexs() {
  mapindexs_.Clear();
}
inline const ::SK::Index_mapIndex& Index::mapindexs(int index) const {
  // @@protoc_insertion_point(field_get:SK.Index.mapIndexs)
  return mapindexs_.Get(index);
}
inline ::SK::Index_mapIndex* Index::mutable_mapindexs(int index) {
  // @@protoc_insertion_point(field_mutable:SK.Index.mapIndexs)
  return mapindexs_.Mutable(index);
}
inline ::SK::Index_mapIndex* Index::add_mapindexs() {
  // @@protoc_insertion_point(field_add:SK.Index.mapIndexs)
  return mapindexs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SK::Index_mapIndex >&
Index::mapindexs() const {
  // @@protoc_insertion_point(field_list:SK.Index.mapIndexs)
  return mapindexs_;
}
inline ::google::protobuf::RepeatedPtrField< ::SK::Index_mapIndex >*
Index::mutable_mapindexs() {
  // @@protoc_insertion_point(field_mutable_list:SK.Index.mapIndexs)
  return &mapindexs_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace SK

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_MapIndex_2eproto__INCLUDED
